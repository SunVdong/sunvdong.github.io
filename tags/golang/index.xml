<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Golang - 标签 - 我的灵感记录</title><link>https://www.vdong.xyz/tags/golang/</link><description>Golang - 标签 - 我的灵感记录</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 23 Jul 2025 21:42:49 +0800</lastBuildDate><atom:link href="https://www.vdong.xyz/tags/golang/" rel="self" type="application/rss+xml"/><item><title>写一个循环缓冲区</title><link>https://www.vdong.xyz/posts/golang/%E5%86%99%E4%B8%80%E4%B8%AA%E5%BE%AA%E7%8E%AF%E7%BC%93%E5%86%B2%E5%8C%BA/</link><pubDate>Wed, 23 Jul 2025 21:42:49 +0800</pubDate><author><name>vdong</name></author><guid>https://www.vdong.xyz/posts/golang/%E5%86%99%E4%B8%80%E4%B8%AA%E5%BE%AA%E7%8E%AF%E7%BC%93%E5%86%B2%E5%8C%BA/</guid><description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>背景</h2><p>在解决 <a href="https://exercism.org/tracks/go/exercises/circular-buffer" target="_blank" rel="noopener noreferrer">这个问题</a> 时，遇到了 环形缓冲区（circular buffer）。可以解决这些原始需求：</p>
<ul>
<li>存储一系列<strong>按顺序到来的数据</strong></li>
<li>数据量可能很大，但我们不希望频繁申请/释放内存（例如不断扩容或移动）</li>
<li>只保留最近的 N 个数据项（例如音频缓冲、实时数据采集）</li>
<li>写入新数据时，如果满了，可以覆盖最旧的数据（可选）</li>
<li>高效读取数据，最好是常数时间复杂度</li>
</ul>
<p>**环形缓冲区（circular buffer）**是：</p>]]></description></item><item><title>Function-Method-Interface-of-Golang</title><link>https://www.vdong.xyz/posts/golang/function-method-interface-of-golang/</link><pubDate>Fri, 09 Sep 2022 15:22:58 +0800</pubDate><author><name>vdong</name></author><guid>https://www.vdong.xyz/posts/golang/function-method-interface-of-golang/</guid><description>&lt;p>Go 语言中方法分为 具名和匿名，当匿名函数引用了外部变量时候就成了闭包函数。&lt;/p>
&lt;p>方法是绑定到一个具体类型的特殊函数，方法依托类型。必须在编译时静态绑定。&lt;/p></description></item><item><title>Golang 中的数组字符串和切片</title><link>https://www.vdong.xyz/posts/golang/array-string-slice-of-golang/</link><pubDate>Fri, 09 Sep 2022 10:57:55 +0800</pubDate><author><name>vdong</name></author><guid>https://www.vdong.xyz/posts/golang/array-string-slice-of-golang/</guid><description><![CDATA[<h2 id="数组" class="headerLink">
    <a href="#%e6%95%b0%e7%bb%84" class="header-mark"></a>数组</h2><h3 id="定义方式" class="headerLink">
    <a href="#%e5%ae%9a%e4%b9%89%e6%96%b9%e5%bc%8f" class="header-mark"></a>定义方式</h3><div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    
    tw-flex 
    tw-flex-row
    tw-flex-1 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        code-block-button
        tw-mx-2 
        tw-flex
        tw-flex-row
        tw-flex-1"
      aria-hidden="true">
          <div class="group-[.is-open]:tw-rotate-90 tw-transition-[transform] tw-duration-500 tw-ease-in-out print:!tw-hidden tw-w-min tw-h-min tw-my-1 tw-mx-1"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></div>
          <p class="tw-select-none !tw-my-1">go</p>]]></description></item></channel></rss>